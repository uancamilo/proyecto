package com.proyecto.integrador.service;

import com.proyecto.integrador.model.*;
import com.proyecto.integrador.repository.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

@Service
public class DataSeederService {

    private static final Logger log = LoggerFactory.getLogger(DataSeederService.class);

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Autowired
    private ProyectoRepository proyectoRepository;

    @Autowired
    private InvitacionRepository invitacionRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Value("${app.data.seed.enabled:false}")
    private boolean seedEnabled;

    @Value("${app.data.seed.users.count:20}")
    private int usersCount;

    @Value("${app.data.seed.projects.count:10}")
    private int projectsCount;

    @Value("${app.data.seed.invitations.count:30}")
    private int invitationsCount;

    private final Random random = new Random(42);

    @EventListener(ApplicationReadyEvent.class)
    public void onApplicationReady() {
        log.info("üîß DataSeeder verificando configuraci√≥n...");
        log.info("üîß seedEnabled: {}", seedEnabled);
        log.info("üîß Usuarios en BD: {}", usuarioRepository.count());
        log.info("üîß Proyectos en BD: {}", proyectoRepository.count());

        if (seedEnabled) {
            log.info("üå± DataSeeder HABILITADO - Iniciando...");
            try {
                seedDummyData();
            } catch (Exception e) {
                log.error("‚ùå Error en DataSeeder: {}", e.getMessage(), e);
            }
        } else {
            log.info("‚è∏Ô∏è DataSeeder DESHABILITADO (app.data.seed.enabled=false)");
        }
    }

    // Problema: Esta condici√≥n en DataSeederService.java impide la ejecuci√≥n:
// if (totalProyectos < 5) {

// SOLUCION 1: Modificar la condici√≥n en DataSeederService.java

    @Transactional
    public void seedDummyData() {
        log.info("üîç Verificando si necesita seed...");

        long totalUsuarios = usuarioRepository.count();
        long totalProyectos = proyectoRepository.count();

        log.info("üìä Estado actual: {} usuarios, {} proyectos", totalUsuarios, totalProyectos);

        // CAMBIAR ESTA L√çNEA:
        // if (totalProyectos < 5) {

        // POR ESTA (para permitir m√°s datos):
        if (totalProyectos < projectsCount) {
            log.info("üöÄ Iniciando seed de datos adicionales...");
            log.info("üéØ Objetivo: {} usuarios, {} proyectos, {} invitaciones",
                    usersCount, projectsCount, invitationsCount);

            try {
                // 1. Crear usuarios adicionales
                List<Usuario> nuevosUsuarios = createAdditionalUsers();
                log.info("‚úÖ Usuarios creados: {}", nuevosUsuarios.size());

                // 2. Crear proyectos adicionales
                List<Proyecto> nuevosProyectos = createAdditionalProjects();
                log.info("‚úÖ Proyectos creados: {}", nuevosProyectos.size());

                // 3. Crear invitaciones adicionales
                List<Invitacion> nuevasInvitaciones = createAdditionalInvitations();
                log.info("‚úÖ Invitaciones creadas: {}", nuevasInvitaciones.size());

            } catch (Exception e) {
                log.error("‚ùå Error durante seed adicional: {}", e.getMessage(), e);
                throw e;
            }
        } else {
            log.info("‚è≠Ô∏è Seed saltado - Ya hay {} proyectos (objetivo: {})", totalProyectos, projectsCount);
        }
    }

// METODOS MODIFICADOS para crear datos adicionales:

    private List<Usuario> createAdditionalUsers() {
        List<Usuario> usuarios = new ArrayList<>();

        // Array expandido de nombres
        String[] nombres = {
                "Ana Garc√≠a", "Carlos L√≥pez", "Mar√≠a Rodr√≠guez", "Juan Mart√≠nez",
                "Laura S√°nchez", "Pedro G√≥mez", "Carmen Hern√°ndez", "Luis P√©rez",
                "Sof√≠a Ruiz", "Miguel Torres", "Elena Moreno", "Diego Silva",
                "Isabel Castro", "Fernando Jim√©nez", "Claudia Vargas", "Roberto Herrera",
                "Patricia Ramos", "Andr√©s Delgado", "Natalia Mendoza", "Ricardo Aguilar",
                "Ver√≥nica Cruz", "Javier Rojas", "Alejandra Pe√±a", "Sebasti√°n Vega",
                "M√≥nica Guerrero", "Daniel Flores", "Gabriela Ortiz", "Adri√°n Mora",
                "Lorena Castillo", "√ìscar Romero", "Valeria Espinoza", "Emilio Reyes",
                "Cristina R√≠os", "Mauricio Lozano", "Sandra Medina", "Ra√∫l Paredes",
                "Beatriz Salinas", "Francisco N√∫√±ez", "Mariana Contreras", "Jorge Campos",
                "Paola Miranda", "Alberto Serrano", "Luc√≠a V√°zquez", "Guillermo Le√≥n",
                "Silvia Carrillo", "Ignacio Montes", "Carolina Ibarra", "Rodrigo Fuentes",
                "Andrea Villalobos", "Pablo Ram√≠rez", "Fernanda Guti√©rrez", "Arturo Molina",
                "Roc√≠o Navarro", "H√©ctor Cort√©s", "Daniela Rueda", "C√©sar Cabrera",
                "Gloria Sandoval", "Mario Figueroa", "Esperanza Mar√≠n", "V√≠ctor Dom√≠nguez",
                "Pilar Alvarez", "Enrique Soto", "Mercedes Villa", "Antonio Paz",
                "Rosa Acosta", "Manuel Ben√≠tez", "Alma Estrada", "Salvador Orozco",
                "Norma Pacheco", "Rub√©n Maldonado", "Yolanda Cervantes", "Joaqu√≠n Santana",
                "Leticia Ugalde", "Ram√≥n Sol√≠s", "Irma Gallardo", "Tom√°s Mej√≠a",
                "Amparo Cuevas", "Edgar Rosales", "Dolores Velasco", "Nicol√°s Ayala",
                "Consuelo Ponce", "Agust√≠n C√°rdenas", "Remedios Ch√°vez", "Felipe Escobar"
        };

        String[] dominios = {"gmail.com", "hotmail.com", "yahoo.com", "outlook.com", "empresa.com", "test.com"};

        // Calcular cu√°ntos usuarios crear
        long usuariosExistentes = usuarioRepository.count();
        int usuariosACrear = Math.max(0, usersCount - (int)usuariosExistentes);

        log.info("üìù Creando {} usuarios adicionales", usuariosACrear);

        for (int i = 0; i < usuariosACrear; i++) {
            try {
                String nombreCompleto = nombres[i % nombres.length];
                if (i >= nombres.length) {
                    nombreCompleto += " " + (i / nombres.length + 1);
                }

                // Email √∫nico basado en timestamp para evitar duplicados
                String email = "usuario" + System.currentTimeMillis() + "_" + i + "@" + dominios[i % dominios.length];

                // Verificar que no exista
                if (!usuarioRepository.existsByEmail(email)) {
                    UsuarioUser usuario = new UsuarioUser();
                    usuario.setNombre(nombreCompleto);
                    usuario.setEmail(email);
                    usuario.setPassword(passwordEncoder.encode("password123"));

                    Usuario savedUser = usuarioRepository.save(usuario);
                    usuarios.add(savedUser);

                    if (i % 50 == 0) {
                        log.debug("üë§ Usuarios creados: {}/{}", i + 1, usuariosACrear);
                    }
                }
            } catch (Exception e) {
                log.warn("Error creando usuario {}: {}", i, e.getMessage());
            }
        }

        return usuarios;
    }

    private List<Proyecto> createAdditionalProjects() {
        List<Proyecto> proyectos = new ArrayList<>();

        // Obtener admin para asignar como creador
        Usuario admin = usuarioRepository.findByEmail("admin@email.com")
                .orElse(null);

        if (admin == null) {
            log.warn("‚ö†Ô∏è No se encontr√≥ admin, no se pueden crear proyectos");
            return proyectos;
        }

        // Array expandido de proyectos
        String[] nombresProyectos = {
                "Sistema de Gesti√≥n Escolar", "E-commerce de Ropa", "App de Delivery",
                "Portal de Noticias", "Sistema de Reservas", "Dashboard Analytics",
                "Red Social Corporativa", "Sistema de Inventario", "Plataforma de Cursos",
                "App de Fitness", "Sistema de Facturaci√≥n", "Marketplace de Servicios",
                "Sistema de Help Desk", "App de Transporte", "Portal Inmobiliario",
                "Sistema de Biblioteca", "App de Citas", "Portal de Empleo",
                "Sistema de Telemedicina", "App de Finanzas Personales", "CRM Empresarial",
                "Sistema de Punto de Venta", "Plataforma de Streaming", "App de M√∫sica",
                "Sistema de Gesti√≥n Hotelera", "Portal de Turismo", "App de Recetas",
                "Sistema de Control de Asistencia", "Plataforma de Freelancers", "App de Meditaci√≥n",
                "Sistema de Gesti√≥n M√©dica", "Portal de Eventos", "App de Fotograf√≠a",
                "Sistema de Log√≠stica", "Plataforma Educativa", "App de Productividad",
                "Sistema de Recursos Humanos", "Portal de Arte", "App de Deportes",
                "Sistema de Contabilidad", "Plataforma de Marketing", "App de Viajes",
                "Sistema de Gesti√≥n Agr√≠cola", "Portal de Tecnolog√≠a", "App de Clima",
                "Sistema de Seguridad", "Plataforma de Blockchain", "App de IoT",
                "Sistema de Manufactura", "Portal de Sostenibilidad", "App de Realidad Virtual",
                "Sistema de Telecomunicaciones", "Plataforma de IA", "App de Machine Learning",
                "Sistema de Big Data", "Portal de Ciberseguridad", "App de Cloud Computing",
                "Sistema de DevOps", "Plataforma de Microservicios", "App de APIs",
                "Sistema de Business Intelligence", "Portal de Data Science", "App de Analytics"
        };

        String[] sectores = {
                "Educativo", "Comercial", "Salud", "Financiero", "Log√≠stica", "Entretenimiento",
                "Turismo", "Alimentaci√≥n", "Tecnolog√≠a", "Manufactura", "Agricultura", "Inmobiliario"
        };

        EstadoProyecto[] estados = EstadoProyecto.values();

        // Calcular cu√°ntos proyectos crear
        long proyectosExistentes = proyectoRepository.count();
        int proyectosACrear = Math.max(0, projectsCount - (int)proyectosExistentes);

        log.info("üìù Creando {} proyectos adicionales", proyectosACrear);

        for (int i = 0; i < proyectosACrear; i++) {
            try {
                Proyecto proyecto = new Proyecto();

                String nombreBase = nombresProyectos[i % nombresProyectos.length];
                String sector = sectores[i % sectores.length];
                proyecto.setNombre(nombreBase + " " + sector + (i >= nombresProyectos.length ? " v" + (i / nombresProyectos.length + 1) : ""));

                proyecto.setDescripcion("Desarrollo completo de " + nombreBase.toLowerCase() +
                        " para el sector " + sector.toLowerCase() +
                        ". Incluye dise√±o, desarrollo, testing y deployment.");

                proyecto.setEstado(estados[random.nextInt(estados.length)]);

                // Fechas hist√≥ricas m√°s realistas (√∫ltimos 6 meses)
                LocalDate fechaPublicacion = LocalDate.now().minusDays(random.nextInt(180));
                proyecto.setFechaPublicacion(fechaPublicacion);
                proyecto.setFechaPostulacion(fechaPublicacion.plusDays(7 + random.nextInt(21)));
                proyecto.setFechaEntrega(proyecto.getFechaPostulacion().plusDays(30 + random.nextInt(120)));

                // Valores m√°s realistas con distribuci√≥n variada
                BigDecimal[] rangosValor = {
                        BigDecimal.valueOf(1000 + random.nextInt(4000)),    // 1K-5K (proyectos peque√±os)
                        BigDecimal.valueOf(5000 + random.nextInt(10000)),   // 5K-15K (proyectos medianos)
                        BigDecimal.valueOf(15000 + random.nextInt(35000)),  // 15K-50K (proyectos grandes)
                        BigDecimal.valueOf(50000 + random.nextInt(50000))   // 50K-100K (proyectos enterprise)
                };
                proyecto.setValorMonetario(rangosValor[random.nextInt(rangosValor.length)]);

                proyecto.setCreadoPor(admin);

                Proyecto savedProject = proyectoRepository.save(proyecto);
                proyectos.add(savedProject);

                if (i % 20 == 0) {
                    log.debug("üèóÔ∏è Proyectos creados: {}/{}", i + 1, proyectosACrear);
                }

            } catch (Exception e) {
                log.warn("Error creando proyecto {}: {}", i, e.getMessage());
            }
        }

        return proyectos;
    }

    private List<Invitacion> createAdditionalInvitations() {
        List<Invitacion> invitaciones = new ArrayList<>();

        try {
            // Obtener datos necesarios
            List<Usuario> usuarios = usuarioRepository.findAll();
            List<Proyecto> proyectos = proyectoRepository.findAll();
            Usuario admin = usuarioRepository.findByEmail("admin@email.com").orElse(null);

            if (usuarios.isEmpty() || proyectos.isEmpty() || admin == null) {
                log.warn("‚ö†Ô∏è No hay datos suficientes para crear invitaciones");
                return invitaciones;
            }

            // Filtrar solo usuarios normales para invitar
            List<Usuario> usuariosNormales = usuarios.stream()
                    .filter(u -> u instanceof UsuarioUser)
                    .toList();

            if (usuariosNormales.isEmpty()) {
                log.warn("‚ö†Ô∏è No hay usuarios normales para invitar");
                return invitaciones;
            }

            EstadoInvitacion[] estados = EstadoInvitacion.values();
            Set<String> invitacionesUnicas = new HashSet<>();

            // Obtener invitaciones existentes para evitar duplicados
            List<Invitacion> existentes = invitacionRepository.findAll();
            for (Invitacion inv : existentes) {
                invitacionesUnicas.add(inv.getProyecto().getId() + "-" + inv.getInvitadoEmail());
            }

            long invitacionesExistentes = invitacionRepository.count();
            int invitacionesACrear = Math.max(0, invitationsCount - (int)invitacionesExistentes);

            log.info("üìù Creando {} invitaciones adicionales", invitacionesACrear);

            int intentos = 0;
            int maxIntentos = invitacionesACrear * 3; // Para evitar loop infinito

            while (invitaciones.size() < invitacionesACrear && intentos < maxIntentos) {
                try {
                    Proyecto proyecto = proyectos.get(random.nextInt(proyectos.size()));
                    Usuario usuario = usuariosNormales.get(random.nextInt(usuariosNormales.size()));

                    String key = proyecto.getId() + "-" + usuario.getEmail();

                    if (!invitacionesUnicas.contains(key)) {
                        invitacionesUnicas.add(key);

                        Invitacion invitacion = new Invitacion();
                        invitacion.setProyecto(proyecto);
                        invitacion.setInvitadoEmail(usuario.getEmail());
                        invitacion.setInvitador(admin);

                        // Distribuci√≥n realista: 60% aceptadas, 25% pendientes, 15% rechazadas
                        EstadoInvitacion estado;
                        int rand = random.nextInt(100);
                        if (rand < 60) {
                            estado = EstadoInvitacion.ACEPTADA;
                        } else if (rand < 85) {
                            estado = EstadoInvitacion.PENDIENTE;
                        } else {
                            estado = EstadoInvitacion.RECHAZADA;
                        }
                        invitacion.setEstado(estado);

                        // Fechas hist√≥ricas (√∫ltimos 4 meses)
                        LocalDateTime fechaInvitacion = LocalDateTime.now()
                                .minusDays(random.nextInt(120))
                                .minusHours(random.nextInt(24))
                                .minusMinutes(random.nextInt(60));
                        invitacion.setFechaInvitacion(fechaInvitacion);

                        Invitacion savedInvitation = invitacionRepository.save(invitacion);
                        invitaciones.add(savedInvitation);

                        if (invitaciones.size() % 100 == 0) {
                            log.debug("üìß Invitaciones creadas: {}/{}", invitaciones.size(), invitacionesACrear);
                        }
                    }
                } catch (Exception e) {
                    log.warn("Error creando invitaci√≥n {}: {}", intentos, e.getMessage());
                }
                intentos++;
            }
        } catch (Exception e) {
            log.error("Error general creando invitaciones: {}", e.getMessage());
        }

        return invitaciones;
    }
}